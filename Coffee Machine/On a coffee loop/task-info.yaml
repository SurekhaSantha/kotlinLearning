type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import machine.MainKt;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Main.kt
  visible: true
  text: "package machine\n\nimport java.util.*\nconst val water: Int= 400\nconst val\
    \ milk: Int= 540\nconst val coffeeBeans: Int= 120\nconst val disposableCups: Int=\
    \ 9\nconst val money: Int = 550\n\nfun printMachineDetails(water:Int, milk: Int,\
    \ coffeeBeans: Int, disposableCups: Int, money: Int){   \n    println(\"The coffee\
    \ machine has:\")\n    println(\"$water of water\")\n    println(\"$milk of milk\"\
    )\n    println(\"$coffeeBeans of coffee beans\")\n    println(\"$disposableCups\
    \ of disposable cups\")\n    println(\"$money of money\")\n}\nfun buyCoffee()\
    \ {\n    val scanner = Scanner(System.`in`)\n    println(\"What do you want to\
    \ buy? 1 - espresso, 2 - latte, 3 - cappuccino:\")\n    when (scanner.nextInt())\
    \ {\n        1 -> buyExpresso()\n        2 -> buyLatte()\n        3 -> buyCappuccino()\n\
    \    }   \n}\n\nfun buyExpresso(){\n    val water = water - 250\n    val coffeeBeans\
    \ = coffeeBeans - 16\n    val disposableCups = disposableCups - 1\n    val money\
    \ = money + 4\n    printMachineDetails(water,milk,coffeeBeans,disposableCups,money)\n\
    }\n\nfun buyLatte(){\n    val water = water - 350\n    val milk = milk - 75\n\
    \    val coffeeBeans = coffeeBeans - 20\n    val disposableCups = disposableCups\
    \ - 1\n    val money = money + 7\n    printMachineDetails(water,milk,coffeeBeans,disposableCups,money)\n\
    }\n\nfun buyCappuccino(){\n    val water = water - 200\n    val milk = milk -\
    \ 100\n    val coffeeBeans = coffeeBeans - 12\n    val disposableCups = disposableCups\
    \ - 1\n    val money = money + 6\n    printMachineDetails(water,milk,coffeeBeans,disposableCups,money)\n\
    }\n\nfun fillCoffee() {\n    val scanner = Scanner(System.`in`)\n    println(\"\
    Write how many ml of water do you want to add:\")\n    val fillWater: Int = scanner.nextInt()\n\
    \    println(\"Write how many ml of milk do you want to add:\")\n    val fillMilk:\
    \ Int = scanner.nextInt()\n    println(\"Write how many grams of coffee beans\
    \ do you want to add:\")\n    val fillBeans: Int = scanner.nextInt()\n    println(\"\
    Write how many disposable cups of coffee do you want to add:\")\n    val fillCups:\
    \ Int = scanner.nextInt()\n    val water = water + fillWater\n    val milk = milk\
    \ + fillMilk\n    val coffeeBeans = coffeeBeans + fillBeans\n    val disposableCups\
    \ = disposableCups + fillCups\n    printMachineDetails(water,milk,coffeeBeans,disposableCups,money)\n\
    }\n\nfun takeCoffee() {\n    println(\"I gave you $money\")\n    val money = 0\n\
    \    printMachineDetails(water,milk,coffeeBeans,disposableCups,money)\n}\n\nfun\
    \ main() {\n    \n    printMachineDetails(water,milk,coffeeBeans,disposableCups,money)\n\
    \    val scanner = Scanner(System.`in`)\n    println(\"Write action (buy, fill,\
    \ take):\")\n    val action: String = scanner.next()\n    when(action){\n    \
    \    \"buy\" -> buyCoffee()\n        \"fill\" -> fillCoffee()\n        \"take\"\
    \ -> takeCoffee()\n    }\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/67/stages/364/implement
status: Solved
record: 5
