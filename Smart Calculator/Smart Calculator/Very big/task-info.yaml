type: edu
custom_name: stage8
files:
- name: test/Test.java
  visible: false
  text: |
    import calculator.MainKt;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = 32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = 2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c  ").trim();
                    if (!output.equals("2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 13 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process " +
                            "multiple operations with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // test suit for the 8th stage with very large numbers
                    main.start();

                    // testing basic assignment
                    String output = main.execute("n = 32000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - n - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // testing reassignment with big values
                    output = main.execute("c = n \nc = 2000000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("2000000000000000000000")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute(
                        "11000000000000000000 - 9000000000000000000 - " +
                        "c + 1998000000000000000000").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute(
                        "5000000000000000000 --- 2000000000000000000 " +
                        "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                    if (!output.equals("10000000000000000000")) {
                        return CheckResult.wrong("The program cannot process multiple " +
                            "operations with several operators.");
                    }

                    // testing all operators, with variables
                    main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                    output = main.execute("a * 4000000000000000000 / " +
                        "b - (3000000000000000000 - 1000000000000000000)").trim();
                    if (!output.equals("12000000000000000000")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })

            );
        }
    }
  learner_created: false
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator
    import java.util.Scanner
    fun main() {
        val scanner = Scanner(System.`in`)
        var go: Boolean = true
        loop@ while (go) {
            //val str: String = readLine()!!
            val str: String = "a * 4 / b - (3 - 1)"
            when {
                str.startsWith("/", true) -> {
                    when (str) {
                        "/help" -> println("The program calculates multiplication, division, addition and subtraction")
                        "/exit" -> {
                            println("Bye!")
                            go = false
                        }
                        else -> println("Unknown command")
                    }
                }
                str == "" -> continue@loop
                str.contains("=") -> assignVariable(str)
                str.contains("(") || str.contains(")") -> parenthesesExpression(str)
                else -> calculateVariables(str.replace("\\s{2}".toRegex(), ""))
            }
        }
    }

    var varMap = mutableMapOf<String, Int>()
    private var stack = mutableListOf<String>()
    private var queue = mutableListOf<String>()
    private var expressionList = mutableListOf<String>()

    fun parenthesesExpression(str: String) {
        var finString = str
        if(Regex("^(.*)[a-zA-Z]+(.*)$").containsMatchIn(str)) {
            varMap.forEach { (key, value) ->
                finString = finString.replace(key.toRegex(), "$value")
            }
        }
        parseExpression(finString)
    }

    fun parseExpression(str: String) {
        str.forEach {
            expressionList.add(it.toString())
        }
        print("list ")
        expressionList.forEach {
            println(it)
        }
        //getPostFixEx()
    }
    private fun getPostFixEx() {
        expressionList.forEach {
            when {
                it == "(" -> push(it)
                it == ")" -> {
                    if (expressionList.contains("(")) {
                        pop()
                    }
                }
                Regex("[\\d]").containsMatchIn(it) -> addQueue(it)
                Regex("[+-]").containsMatchIn(it) ->
                    if (stack.isEmpty() || stack.last() == "(") push(it)
                    else if (stack.last().contains(Regex("[/*]"))) {
                        pop()
                        push(it)
                    }
                    else {
                        addQueue(stack.last())
                        stack[stack.lastIndex] = it
                    }
                Regex("[*/]").containsMatchIn(it) -> {
                    if (stack.isNotEmpty() && (stack.last() == "*" || stack.last() == "/")) {
                        pop()
                    }
                    push(it)
                }
            }
        }
        if (stack.isNotEmpty()) {
            for (i in stack.lastIndex downTo 0) {
                if (stack[i] != "(") {
                    addQueue(stack[i])
                }
            }
        }
        queue.forEach {
            print(it)
        }
        println()

    }

    private fun pop() {
        Loop@ for (i in stack.lastIndex downTo 0) {
            if (stack[i] == "(") {
                stack[i] = " "
                break@Loop
            }
            addQueue(stack[i])
            stack[i] = " "
        }
        stack.removeIf { it == " " }
    }

    private fun addQueue(item: String) {
        queue.add(item)
    }

    private fun push(item: String) {
        stack.add(item)
    }
    private fun calcPostFix() {
        val stack = mutableListOf<Int>()
        for (item in queue) {
            when {
                Regex("[\\d]").containsMatchIn(item) -> {
                    stack.add(item.toInt())
                }

                item == "+" -> {
                    stack[stack.lastIndex - 1] = stack[stack.lastIndex - 1] + stack.last()
                    stack.removeAt(stack.lastIndex)
                }

                item == "*" -> {
                    stack[stack.lastIndex - 1] = stack[stack.lastIndex - 1] * stack.last()
                    stack.removeAt(stack.lastIndex)
                }

                item == "/" -> {
                    stack[stack.lastIndex - 1] = stack[stack.lastIndex - 1] / stack.last()
                    stack.removeAt(stack.lastIndex)
                }

                item == "-" -> {
                    stack[stack.lastIndex - 1] = stack[stack.lastIndex - 1] - stack.last()
                    stack.removeAt(stack.lastIndex)
                }
            }
        }
        println("${stack.first()}")
    }

    fun assignVariable(str: String) {
        val assignNumber = Regex("^\\s*[a-zA-Z]+\\s*=\\s*-?\\d+\\s*$")
        val assignVariable = Regex("^\\s*[a-zA-Z]+\\s*=\\s*[a-zA-Z]+\\s*$")
        val invalidIdentifier = Regex("^\\s*[a-zA-Z0-9]+\\s*=(.*)$")
        val invalidVarAssignment = Regex("^(.*)=\\s*[a-zA-Z0-9]$")
        val invalidAssignment = Regex("^(.*)=(.*)=(.*)$")
        when {
            assignNumber.containsMatchIn(str) -> {
                val varNumber = str.split("=").toTypedArray()
                for (i in 0..varNumber.lastIndex) {
                    varNumber[i] = varNumber[i].replace("\\s".toRegex(), "")
                }
                varMap[varNumber[0]]=varNumber[1].toInt()
                return
            }
            assignVariable.containsMatchIn(str) -> {
                val varNumber = str.split("=").toTypedArray()
                for (i in 0..varNumber.lastIndex) {
                    varNumber[i] = varNumber[i].replace("\\s".toRegex(), "")
                }
                var found: Boolean = false
                for ((key, value) in varMap) {
                    if (key == varNumber[1]) {
                        varMap[varNumber[0]] = value
                        found = true
                    }
                }
                if (!found) {
                    println("Unknown variable")
                }
                return
            }
            invalidIdentifier.containsMatchIn(str) -> {
                println("Invalid identifier")
                return
            }
            invalidAssignment.containsMatchIn(str) || invalidVarAssignment.containsMatchIn(str) -> {
                println("Invalid assignment")
                return
            }
            else -> {
                println("Invalid identifier")
            }
        }
    }

    fun calculateVariables(str: String) {
        val variableOnly = Regex("^[a-zA-Z]+$")
        val calculateAllVariables = Regex("^(.*)[a-zA-Z]+(.*)$")
        val calculateAllNumber = Regex("^[^a-zA-Z]$")

        /*
        val checkVariableSubtraction = Regex("^[a-zA-Z]+\\s*\\-\\s*[a-zA-Z]+\\s*$")
        val checkVariableAdditon = Regex("^[a-zA-Z]+\\s*\\+\\s*[a-zA-Z]+\\s*$")
        */
        when {
            variableOnly.containsMatchIn(str) -> {
                if(varMap[str] != null) {
                    println(varMap[str])
                } else {
                    println("Unknown variable")
                }
                return
            }
            calculateAllVariables.containsMatchIn(str) -> {
                var finString = str
                varMap.forEach { (key, value) ->
                    finString = finString.replace(key.toRegex(), "$value")
                }
                cal(finString)
            }
            calculateAllNumber.containsMatchIn(str) -> cal(str)
            else -> cal(str)
    /*
            checkVariableAdditon.containsMatchIn(str) -> {
                var varNumber = str.split("+").toTypedArray()
                for (i in 0..varNumber.lastIndex) {
                    varNumber[i] = varNumber[i].replace("\\s".toRegex(), "")
                }
                cal("${varMap[varNumber[0]]} + ${varMap[varNumber[1]]}")
            }
            checkVariableSubtraction.containsMatchIn(str) -> {
                var varNumber = str.split("-").toTypedArray()
                for (i in 0..varNumber.lastIndex) {
                    varNumber[i] = varNumber[i].replace("\\s".toRegex(), "")
                }
                cal("${varMap[varNumber[0]]} - ${varMap[varNumber[1]]}")
            }
    */
        }
    }
    fun cal(str: String) {
        val numbers = str.split(" ").toTypedArray()
        var n: Int = 0
        var number: Int = 0
        if (isDigit(numbers[0])) {
            number = numbers[0].toInt()
            n = 2
        } else {
            if(numbers[0][0].equals("-")) {
                n = 1
            } else {
                println("Invalid expression")
            }
        }

        for(i in n..numbers.lastIndex step 2) {
            if(isDigit(numbers[i]) && numbers[i-1].contains("*")) {
                number *= numbers[i].toInt()
            } else if(isDigit(numbers[i]) && numbers[i-1].contains("/")) {
                number /= numbers[i].toInt()
            } else if (isDigit(numbers[i]) && numbers[i-1].contains("-")) {
                if (subtract(numbers[i-1])) number -= numbers[i].toInt()
                else number += numbers[i].toInt()
            } else if(isDigit(numbers[i]) && numbers[i-1].contains("+")) {
                number += numbers[i].toInt()
            }
        }
        println(number)
    }

    private fun subtract(str:String): Boolean {
        var subtract: Boolean = true
        var count = 0
        for (i in str) {
            count += 1
        }
        subtract = count % 2 != 0
        return subtract
    }

    private fun isDigit(str:String): Boolean {
        var digit: Boolean = false
        for (i in str.toCharArray()) {
            digit = i.isDigit()
        }
        return digit
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/493/implement
status: Solved
record: 8
