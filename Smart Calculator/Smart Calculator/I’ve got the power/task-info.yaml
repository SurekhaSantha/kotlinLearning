type: edu
custom_name: stage7
files:
- name: test/Test.java
  visible: false
  text: |
    import calculator.MainKt;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = -32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = -2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 9 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
- name: src/calculator/Main.kt
  visible: true
  text: "package calculator\nimport java.util.Scanner\nfun main() {\n    val scanner\
    \ = Scanner(System.`in`)\n    var go: Boolean = true\n    loop@ while (go) {\n\
    \        var str: String = readLine()!!\n        when(str) {\n            \"/help\"\
    \ -> println(\"The program calculates the sum of numbers\")\n            \"/exit\"\
    \ -> { println(\"Bye!\")\n                    go = false }\n            \"/go\"\
    \ -> println(\"Unknown command\")\n            \"/start\" -> println(\"Unknown\
    \ command\")\n            \"\" -> continue@loop\n            else -> regularExpression(str)\n\
    \        }\n    }\n}\nvar varMap = mutableMapOf<String, Int>()\nfun regularExpression(str:\
    \ String) {\n    val digitRegex = Regex(\"^[a-zA-Z]+\\\\s*=\\\\s*\\\\d+\\\\s*$\"\
    )\n    val variableRegex = Regex(\"^[a-zA-Z]+\\\\s*=\\\\s*[a-zA-Z]+\\\\s*$\")\n\
    \    val invalidIdentifier = Regex(\"^[a-zA-Z0-9]+\\\\s*={1}[a-zA-Z0-9]+\\\\s*$\"\
    )\n    val invalidIdentifierAssignment = Regex(\"^[a-zA-Z0-9]+\\\\s*=\\\\s*[a-zA-Z0-9]+\\\
    \\s*$\")\n    val invalidAssignment = Regex(\"^(.*)=(.*)={1}(.*)$\")\n    val\
    \ variableOnly = Regex(\"^[a-zA-Z]+$\")\n    val calculateRegex = Regex(\"^[a-zA-Z]+(.*)$\"\
    )\n    val checkVariableSubtraction = Regex(\"^[a-zA-Z]+\\\\s*\\\\-\\\\s*[a-zA-Z]+\\\
    \\s*$\")\n    val checkVariableAdditon = Regex(\"^[a-zA-Z]+\\\\s*\\\\+\\\\s*[a-zA-Z]+\\\
    \\s*$\")\n    val checkDigitCalculation = Regex(\"^[0-9]+(.*)$\")\n    val latinLetters\
    \ = Regex(\"^[^\\\\p{IsLatin}]$\")\n    \n    when {\n        checkDigitCalculation.containsMatchIn(str)\
    \ -> cal(str)\n        digitRegex.containsMatchIn(str) -> {\n            var varNumber\
    \ = str.split(\"=\").toTypedArray()\n            for (i in 0..varNumber.lastIndex)\
    \ {\n                varNumber[i] = varNumber[i].replace(\"\\\\s\".toRegex(),\
    \ \"\")\n            }\n            varMap[varNumber[0]]=varNumber[1].toInt()\n\
    \            return\n        }\n        variableRegex.containsMatchIn(str) ->\
    \ {\n            var varNumber = str.split(\"=\").toTypedArray()\n           \
    \ for (i in 0..varNumber.lastIndex) {\n                varNumber[i] = varNumber[i].replace(\"\
    \\\\s\".toRegex(), \"\")\n            }\n            var found: Boolean = false\n\
    \            for ((key, value) in varMap) {\n                if (key == varNumber[1])\
    \ {\n                    varMap[varNumber[0]] = value\n                    found\
    \ = true\n                }\n            }\n            if (!found) {\n      \
    \          println(\"Unknown variable\")\n            }\n            return\n\
    \        }\n        checkVariableAdditon.containsMatchIn(str) -> {\n         \
    \   var varNumber = str.split(\"+\").toTypedArray()\n            for (i in 0..varNumber.lastIndex)\
    \ {\n                varNumber[i] = varNumber[i].replace(\"\\\\s\".toRegex(),\
    \ \"\")\n            }\n            cal(\"${varMap[varNumber[0]]} + ${varMap[varNumber[1]]}\"\
    )\n        }\n        checkVariableSubtraction.containsMatchIn(str) -> {\n   \
    \         var varNumber = str.split(\"-\").toTypedArray()\n            for (i\
    \ in 0..varNumber.lastIndex) {\n                varNumber[i] = varNumber[i].replace(\"\
    \\\\s\".toRegex(), \"\")\n            }\n            cal(\"${varMap[varNumber[0]]}\
    \ - ${varMap[varNumber[1]]}\")\n        }\n        invalidIdentifier.containsMatchIn(str)\
    \ -> {\n            println(\"Invalid identifier\")\n            return\n    \
    \    }\n        invalidAssignment.containsMatchIn(str) || invalidIdentifierAssignment.containsMatchIn(str)\
    \ -> {\n            println(\"Invalid assignment\")\n            return\n    \
    \    }\n        variableOnly.containsMatchIn(str) -> {\n            if(varMap[str]\
    \ != null) {\n                println(varMap[str])\n            } else {\n   \
    \             println(\"Unknown variable\")\n            }\n            return\n\
    \        }\n        calculateRegex.containsMatchIn(str) -> {\n           var finString\
    \ = str\n            varMap.forEach { (key, value) ->\n                finString\
    \ = finString.replace(\"$key\".toRegex(), \"$value\")\n            }\n       \
    \     cal(finString)\n        }\n        else -> {\n            println(\"Invalid\
    \ identifier\")\n        }\n    } \n}   \nfun cal(str: String) {    \n    val\
    \ numbers = str.split(\" \").toTypedArray()\n    var n: Int = 0\n    var number:\
    \ Int = 0\n    if (isDigit(numbers[0])) {\n        number = numbers[0].toInt()\n\
    \        n = 2\n    } else {\n        if(numbers[0][0].equals(\"-\")) {\n    \
    \        n = 1\n        } else {\n            println(\"Invalid expression\")\n\
    \        }\n    }\n    \n    for(i in n..numbers.lastIndex step 2) {\n       \
    \ if (isDigit(numbers[i]) && numbers[i-1].contains(\"-\")) {\n            if (subtract(numbers[i-1]))\
    \ number -= numbers[i].toInt()\n            else number += numbers[i].toInt()\n\
    \        } else if(isDigit(numbers[i]) && numbers[i-1].contains(\"+\")) {\n  \
    \          number += numbers[i].toInt()       \n        }   \n    }\n    println(number)\n\
    }\n\nprivate fun subtract(str:String): Boolean {\n    var subtract: Boolean =\
    \ true\n    var count = 0\n    for (i in str) {\n            count += 1\n    }\n\
    \    if (count % 2 == 0) {\n        subtract = false\n    } else {\n        subtract\
    \ = true\n    }\n    return subtract\n}\n\nprivate fun isDigit(str:String): Boolean\
    \ {\n    var digit: Boolean = false\n    for (i in str.toCharArray()) {\n    \
    \    if (i.isDigit()) {\n            digit = true\n        } else {\n        \
    \    digit = false\n        }\n    }\n    return digit\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/492/implement
status: Solved
record: 7
